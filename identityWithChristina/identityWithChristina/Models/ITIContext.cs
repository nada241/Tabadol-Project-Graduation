// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using identityWithChristina.Models;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace identityWithChristina
{
    public partial class ITIContext : IdentityDbContext<ApplicationUser>
    {

        public ITIContext()
        {
        }

        public ITIContext(DbContextOptions<ITIContext> options)
            : base(options)
        {
        }
        public virtual DbSet<Association> Associations { get; set; } = null!;
        public virtual DbSet<Category> Categories { get; set; } = null!;
        public virtual DbSet<Feedback> Feedbacks { get; set; } = null!;
        public virtual DbSet<GeneralFeedback> GeneralFeedbacks { get; set; } = null!;
        public virtual DbSet<Order> Orders { get; set; } = null!;
        public virtual DbSet<OrderDetail> OrderDetails { get; set; } = null!;
        public virtual DbSet<ApplicationUser> ApplicationUsers { get; set; } = null!;
        public virtual DbSet<Product> Products { get; set; } = null!;
        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                //  optionsBuilder.UseSqlServer("server=.; database=TabadolDB; trusted_connection = true;");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {

            modelBuilder.Entity<Association>(entity =>
            {
                entity.HasKey(e => e.Assid);

                entity.Property(e => e.Assid).HasColumnName("ASSId");

                entity.Property(e => e.AssAddress).HasMaxLength(200);

                entity.Property(e => e.AssDescription).HasMaxLength(500);

                entity.Property(e => e.AssLogoUrl)
                    .HasMaxLength(200)
                    .HasColumnName("AssLogoURL");

                entity.Property(e => e.AssPhone).HasMaxLength(50);

                entity.Property(e => e.Assname)
                    .HasMaxLength(50)
                    .HasColumnName("ASSName");
            });

            modelBuilder.Entity<Category>(entity =>
            {
                entity.Property(e => e.CategoryId).HasColumnName("CategoryID");

                entity.Property(e => e.CategoryName).HasMaxLength(50);

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.PhotoUrl)
                    .HasMaxLength(200)
                    .HasColumnName("PhotoURL");
            });

            modelBuilder.Entity<Feedback>(entity =>
            {
                entity.HasKey(e => new { e.GaveUserId, e.TookUserId });

                entity.Property(e => e.GaveUserId).HasColumnName("GaveUserID");

                entity.Property(e => e.TookUserId).HasColumnName("TookUserID");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Message).HasMaxLength(500);

                entity.HasOne(d => d.GaveUser)
                    .WithMany(p => p.FeedbackGaveUsers)
                    .HasForeignKey(d => d.GaveUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("GaveFeed");

                entity.HasOne(d => d.TookUser)
                    .WithMany(p => p.FeedbackTookUsers)
                    .HasForeignKey(d => d.TookUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TookFeed");
            });

            modelBuilder.Entity<GeneralFeedback>(entity =>
            {
                entity.HasKey(e => e.FeedId);

                entity.Property(e => e.FeedId).HasColumnName("FeedID");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Message).HasMaxLength(500);

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.GeneralFeedbacks)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SiteFeedbacks");
            });

            modelBuilder.Entity<Order>(entity =>
            {
                entity.Property(e => e.OrderId).HasColumnName("OrderID");

                entity.Property(e => e.OrderDate).HasColumnType("datetime");

                entity.Property(e => e.ShipAddress).HasMaxLength(500);

                entity.Property(e => e.ShipDate).HasColumnType("datetime");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("Ordered");
            });

            modelBuilder.Entity<OrderDetail>(entity =>
            {
                entity.HasKey(e => new { e.OdrerId, e.ProductId });

                entity.Property(e => e.DisCount).HasColumnName("disCount");

                entity.HasOne(d => d.Odrer)
                    .WithMany(p => p.OrderDetails)
                    .HasForeignKey(d => d.OdrerId)
                    .HasConstraintName("Details");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.OrderDetails)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrderDetails_Products");
            });

            modelBuilder.Entity<ApplicationUser>(entity =>
            {

                entity.Property(e => e.Ssn)
                    .HasColumnName("SSN");

                entity.Property(e => e.City).HasMaxLength(50);

                entity.Property(e => e.Country).HasMaxLength(50);
                entity.Property(e => e.Gender).HasMaxLength(20);

                entity.Property(e => e.Lname)
                    .HasMaxLength(50)
                    .HasColumnName("LName");

                entity.Property(e => e.PostalCode).HasMaxLength(50);

                entity.Property(e => e.Street).HasMaxLength(50);
                entity.Property(e => e.NumberOfExchanges);
                entity.Property(e => e.Points);
                entity.Property(e => e.ProfilePictureUrl)
                   .HasMaxLength(200)
                   .HasColumnName("ProfilePictureURL");
            });

            modelBuilder.Entity<Product>(entity =>
            {
                entity.Property(e => e.ProductId).HasColumnName("ProductID");

                entity.Property(e => e.CategoryId)
                    .HasColumnName("CategoryID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.DonationAssId).HasColumnName("DonationAssID");

                entity.Property(e => e.ExchangationUserId).HasColumnName("ExchangationUserID");

                entity.Property(e => e.OwnerUserId).HasColumnName("OwnerUserID");

                entity.Property(e => e.PhotoUrl)
                    .HasMaxLength(200)
                    .HasColumnName("PhotoURL");

                entity.Property(e => e.ProductDescription).HasMaxLength(500);

                entity.Property(e => e.ProductName).HasMaxLength(50);

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.CategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Products_Categories");

                entity.HasOne(d => d.DonationAss)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.DonationAssId)
                    .HasConstraintName("Donation");

                entity.HasOne(d => d.ExchangationUser)
                    .WithMany(p => p.ProductExchangationUsers)
                    .HasForeignKey(d => d.ExchangationUserId)
                    .HasConstraintName("Exchange");

                entity.HasOne(d => d.OwnerUser)
                    .WithMany(p => p.ProductOwnerUsers)
                    .HasForeignKey(d => d.OwnerUserId)
                    .HasConstraintName("Owner");
            });
            base.OnModelCreating(modelBuilder);

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
